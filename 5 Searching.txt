-----------------------------------
-----------------------------------
// Search an Element in an array py3
def search(A,N,x):
    #Your code here
    if x in A:
        return A.index(x)
    else:
        return -1
-----------------------------------
-----------------------------------
//searchInSorted py3
def searchInSorted(A,N,K):
    #Your code here
    if K in A:
        return (1)
    else:
        return (-1)
-----------------------------------
-----------------------------------
//countOnes py3
def countOnes(A,N):
    #Your code here
    return A.count(1)
-----------------------------------
-----------------------------------
//sqrt py3
def floorSqrt(x): 
    #Your code here
    if str(math.sqrt(x)).split('.')[1] == '0':
        return int(math.sqrt(x))
    else:
        return math.floor(math.sqrt(x))
-----------------------------------
-----------------------------------
//majorityElement py3
def majorityElement(A,N):
    #Your code here
    import collections
    freqs = collections.Counter(A)
    for k,v in freqs.items():
        if v > N/2:
            return k
    return -1
-----------------------------------
-----------------------------------
//leftIndex py3
def leftIndex(N,A,x):
    #Your code here
    l = 0
    r = N - 1
    def binarySearch(A,l,r,x):
        if x not in A:
            return -1
        mid = l + ((r-l)//2)
        if (A[mid]==x) & ((mid==0) | (A[mid-1]!=x)):
            return mid
        if A[mid] >= x:
            return binarySearch(A,l,mid-1,x)
        if A[mid] < x:
            return binarySearch(A,mid+1,r,x)
    ans = binarySearch(A,l,r,x)
    return ans
-----------------------------------
-----------------------------------
//Peak Element py3
def peakElement(arr, n):
    # Code here
    return arr.index(max(arr))
-----------------------------------
-----------------------------------
// Floor in a Sorted Array py3
def findFloor(A,N,X):
    #Your code here
    floors = []
    for k,v in enumerate(A):
        if v <= X:
            floors.append(k)
    if floors:
        return max(floors)
    else:
        return -1
-----------------------------------
-----------------------------------
// Minimum Number in a sorted rotated array py3
def minNumber(arr,low,high):
    #Your code here
    return min(arr)
-----------------------------------
-----------------------------------
//Two Repeated py3
def twoRepeated(arr,n):
    #Your code here
    count = [0] * (n+2)
    for i in range(0, n+2) : 
        if(count[arr[i]] == 1) : 
            print(arr[i], end = " ") 
        else : 
            count[arr[i]] = count[arr[i]] + 1
-----------------------------------
-----------------------------------
// Roof Top py3
def maxStep(a,n):
    #Your code here
    all_steps = []
    steps = 0
    for i in range(1,n):
        if a[i-1] < a[i]:
            steps = max(steps,1)
            if i >= 2:
                if a[i-2] < a[i-1]:
                    steps += 1
        else:
            steps = 0
        all_steps.append(steps)
    if all_steps:
        return max(all_steps)
    else:
        return 0
-----------------------------------
-----------------------------------
// Count only Repeated py3
def countRepeated(arr,n):
    freqs = collections.Counter(arr)
    x = [(k,v) for k,v in freqs.items() if v > 1]
    return " ".join([str(x[0][0]),str(x[0][1])])

if __name__ == '__main__':
    T = int(input())
    for tc in range(T):
        N = int(input())
        arr = list(map(int,input().strip().split()))
        print (countRepeated(arr,N))
-----------------------------------
-----------------------------------
// Count More than n/k Occurences py3
def countOccurence(arr,n,k):
    #Your code here
    import collections
    freqs = collections.Counter(arr)
    c = 0
    for u,v in freqs.items():
        if v > n/k:
            c += 1
    return c
-----------------------------------
-----------------------------------
// Allocate minimum number of pages py3 
    curr = 0
    for i in range(n):
        if curr + arr[i] > mi:
            curr = arr[i]
            std += 1
            if std > k:
                return False
        else:
            curr += arr[i]
    return True

def allocMinPages(arr,n,k):
    if k > n:
        return -1
    s,totalpage = 0,0
    for i in range(n):
        totalpage += arr[i]
        s = max(s,arr[i])
    e = totalpage
    finalAns = s
    while s <= e:
        mid = math.floor((s+e)/2)
        if isValid(arr,n,k,mid):
            finalAns = mid
            e = mid - 1
        else:
            s = mid + 1
    return finalAns
    
if __name__ == '__main__':
    T = int(input())
    for tcase in range(T):
        N = int(input())
        arr = list(map(int,input().strip().split()))
        M = int(input())
        print (allocMinPages(arr,N,M))
-----------------------------------
-----------------------------------
//subArraySum py3
def subArraySum(arr, n, sum): 
    #Your code here
    curr_sum=0
    j=0
    for i in range(n):
        curr_sum += arr[i]
        while curr_sum > sum:
            curr_sum -= arr[j]
            j += 1
        if curr_sum == sum:
            print (" ".join([str(j+1),str(i+1)]),end="")
            break
    if curr_sum != sum:
        print (-1,end="")
-----------------------------------
-----------------------------------
//medianOf2Arrays py3
def medianOf2Arrays(arr1,arr2,N,M):
    ar = arr1 + arr2
    ar = sorted(ar)
    if (N+M)%2 == 0:
        a = ar[((N+M)//2)-1]
        b = ar[((N+M)//2) + 1 - 1]
        return math.floor(((a+b)/2))
    else:
        c = ar[((N+M+1)//2)-1]
        return c
        
if __name__ == '__main__':
    t = int(input())
    for c in range(t):
        N,M = list(map(int,input().strip().split()))
        arr1 = list(map(int,input().strip().split()))
        arr2 = list(map(int,input().strip().split()))
        print (medianOf2Arrays(arr1,arr2,N,M))